# -*- coding: utf-8 -*-
"""train_save_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p4Z4g94fRGXTYT75ePK45dL1i3hI6zKk
"""

pip install numpy pandas scikit-learn joblib

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
import joblib

# Load your data
def load_data(filepath):
    data = pd.read_csv(filepath)
    return data

# Preprocess the dataset
def preprocess_data(data):
    # Fill numeric missing values with median
    data['Spent($)'].fillna(data['Spent($)'].median(), inplace=True)

    # Define categorical and numeric features
    categorical_features = ['Job Title', 'EX_level_demand', 'Description', 'Technical_Tool', 'Applicants_Num', 'Client_Country']
    numeric_features = ['Spent($)']

    # Create transformers for numeric and categorical data
    numeric_transformer = SimpleImputer(strategy='median')
    categorical_transformer = OneHotEncoder(handle_unknown='ignore')

    # Column transformer to apply transformations to different columns
    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numeric_transformer, numeric_features),
            ('cat', categorical_transformer, categorical_features)
        ])

    return preprocessor

# Define and train the Extra Trees model
def train_model(X, y, preprocessor):
    # Create a pipeline with preprocessing and the model
    model = Pipeline([
        ('preprocessor', preprocessor),
        ('regressor', ExtraTreesRegressor(random_state=42))
    ])

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train the model
    model.fit(X_train, y_train)

    return model

# Main function to execute the steps
if __name__ == '__main__':
    # Load the data
    data = load_data('combined_dataset1-1300.csv')

    # Preprocess the data
    preprocessor = preprocess_data(data)

    # Features and target
    X = data.drop('Hourly_Rate', axis=1)
    y = data['Hourly_Rate']

    # Train the model
    model = train_model(X, y, preprocessor)

    # Save the model
    joblib.dump(model, 'extra_trees_model.joblib')
    print("Model saved successfully!")